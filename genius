import React, { useState } from 'react';
import { SafeAreaView, Text, Button, View } from 'react-native';
import Game from './game';

const App = () => {
  const [gameStarted, setGameStarted] = useState(false);
  const [difficulty, setDifficulty] = useState(null);

  const startGame = (level) => {
    setDifficulty(level);
    setGameStarted(true);
  };

  return (
    <SafeAreaView style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text style={{ fontSize: 24, marginBottom: 20 }}>Jogo Gênios</Text>
      {!gameStarted ? (
        <View>
          <Button title="Iniciar Fácil" onPress={() => startGame('easy')} />
          <Button title="Iniciar Médio" onPress={() => startGame('medium')} />
          <Button title="Iniciar Difícil" onPress={() => startGame('hard')} />
        </View>
      ) : (
        <Game difficulty={difficulty} />
      )}
    </SafeAreaView>
  );
};

export default App;
import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

const gridSize = 3; // 3x3 grid

const Game = ({ difficulty }) => {
  const [sequence, setSequence] = useState([]);
  const [userSequence, setUserSequence] = useState([]);
  const [gameOver, setGameOver] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [level, setLevel] = useState(1); // Controle de nível de dificuldade

  const colors = ['red', 'green', 'blue', 'yellow', 'purple', 'orange', 'pink', 'brown', 'cyan'];

  useEffect(() => {
    if (isPlaying) {
      generateSequence();
    }
  }, [isPlaying]);

  const generateSequence = () => {
    let length;
    switch (difficulty) {
      case 'easy':
        length = 3;
        break;
      case 'medium':
        length = 5;
        break;
      case 'hard':
        length = 7;
        break;
      default:
        length = 3;
    }
    let newSequence = [];
    for (let i = 0; i < length; i++) {
      newSequence.push(Math.floor(Math.random() * gridSize * gridSize));
    }
    setSequence(newSequence);
    setUserSequence([]);
    playSequence(newSequence);
  };

  const playSequence = (sequence) => {
    sequence.forEach((index, i) => {
      setTimeout(() => {
        flashSquare(index);
      }, 1000 * (i + 1));
    });
  };

  const flashSquare = (index) => {
    // Aqui você pode adicionar animações, como mudança de cor ou aumento de tamanho
    console.log('Flashing square at', index);
    // Adicionar animações de feedback visuais
  };

  const handleSquarePress = (index) => {
    if (gameOver) return;
    setUserSequence([...userSequence, index]);

    if (userSequence[index] !== sequence[index]) {
      setGameOver(true);
      alert('Você errou! Tente novamente.');
      resetGame();
    } else if (userSequence.length === sequence.length) {
      setLevel(level + 1);
      setTimeout(() => {
        setUserSequence([]);
        generateSequence();
      }, 1000);
    }
  };

  const resetGame = () => {
    setGameOver(false);
    setLevel(1);
    setSequence([]);
    setUserSequence([]);
    setIsPlaying(false);
  };

  const renderGrid = () => {
    let grid = [];
    for (let i = 0; i < gridSize * gridSize; i++) {
      grid.push(
        <TouchableOpacity
          key={i}
          style={[styles.square, { backgroundColor: colors[i % colors.length] }]}
          onPress={() => handleSquarePress(i)}
        />
      );
    }
    return grid;
  };

  return (
    <View style={styles.container}>
      {gameOver && <Text style={styles.gameOverText}>Fim de jogo! Tente novamente!</Text>}
      <Text style={styles.levelText}>Nível: {level}</Text>
      <View style={styles.grid}>{renderGrid()}</View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  grid: {
    flexWrap: 'wrap',
    flexDirection: 'row',
    width: 300,
    height: 300,
    margin: 20,
  },
  square: {
    width: 90,
    height: 90,
    margin: 5,
    borderRadius: 10,
  },
  gameOverText: {
    fontSize: 24,
    color: 'red',
    marginBottom: 20,
  },
  levelText: {
    fontSize: 18,
    marginBottom: 20,
  },
});

export default Game;
